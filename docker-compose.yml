version: '3'

services:
  base:
    build:
      context: '.'
      dockerfile: './Dockerfile_base'

  vk_bot:
    environment:
      API_KEY: ${API_KEY}
      PGHOST: 'postgres'
      POSTGRES_USER: 'server'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: 'bot'
    build:
      context: '.'
      dockerfile: './Dockerfile_vk_bot'
    depends_on:
      - base
      - postgres
      - crawler

  discord_bot:
    environment:
      DISC_TOKEN: ${DISC_TOKEN}
      PGHOST: 'postgres'
      POSTGRES_USER: 'server'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: 'bot'
    build:
      context: '.'
      dockerfile: './Dockerfile_discord_bot'
    depends_on:
      - base
      - postgres

#  notifier:
#    environment:
#      API_KEY: ${API_KEY}
#      PGHOST: 'postgres'
#      POSTGRES_USER: 'server'
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: 'bot'
#    build:
#      context: '.'
#      dockerfile: './Dockerfile_notifier'
#    depends_on:
#      - base
#      - postgres
#      - crawler

  crawler:
    environment:
      API_KEY: ${API_KEY}
      PGHOST: 'postgres'
      POSTGRES_USER: 'server'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: 'bot'
    build:
      context: '.'
      dockerfile: './Dockerfile_crawler'
    depends_on:
      - base
      - postgres

  postgres:
    environment:
      POSTGRES_USER: 'server'
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: 'bot'
    image: postgres:latest
    restart: always
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/data:/var/lib/postgresql/data
